
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.22 (git sha1 f109fa3d4c5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Defining MPRJ_IO_PADS=38

1. Executing Verilog-2005 frontend: /home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v
Parsing SystemVerilog input from `/home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v' to AST representation.
Generating RTLIL representation for module `\cntr_example'.
Generating RTLIL representation for module `\cntr'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/home/htf6ry/gf180-demo/openlane/cntr_example/runs/22_12_01_09_51/tmp/synthesis/hierarchy.dot'.
Dumping module cntr_example to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \cntr_example
Used module:     \cntr
Parameter \BITS = 32

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\cntr'.
Parameter \BITS = 32
Generating RTLIL representation for module `$paramod\cntr\BITS=s32'00000000000000000000000000100000'.

3.3. Analyzing design hierarchy..
Top module:  \cntr_example
Used module:     $paramod\cntr\BITS=s32'00000000000000000000000000100000

3.4. Analyzing design hierarchy..
Top module:  \cntr_example
Used module:     $paramod\cntr\BITS=s32'00000000000000000000000000100000
Removing unused module `\cntr'.
Removed 1 unused modules.
Warning: Resizing cell port cntr_example.cntr.q from 38 bits to 32 bits.
Warning: Resizing cell port cntr_example.cntr.sdata from 38 bits to 32 bits.
WARNING: TRISTATE_BUFFER_MAP is defined but could not be found: /home/htf6ry/GF180PDK//gf180mcuC/libs.tech/openlane/gf180mcu_fd_sc_mcu7t5v0/tribuff_map.v

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \cntr_example
Used module:     $paramod\cntr\BITS=s32'00000000000000000000000000100000

4.1.2. Analyzing design hierarchy..
Top module:  \cntr_example
Used module:     $paramod\cntr\BITS=s32'00000000000000000000000000100000
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v:134$3 in module $paramod\cntr\BITS=s32'00000000000000000000000000100000.
Removed a total of 0 dead cases.

4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.2.4. Executing PROC_INIT pass (extract init attributes).

4.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `$paramod\cntr\BITS=s32'00000000000000000000000000100000.$proc$/home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v:134$3'.

4.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

4.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\cntr\BITS=s32'00000000000000000000000000100000.$proc$/home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v:134$3'.
     1/1: $0\q[31:0]

4.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\cntr\BITS=s32'00000000000000000000000000100000.\q' using process `$paramod\cntr\BITS=s32'00000000000000000000000000100000.$proc$/home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v:134$3'.
  created $adff cell `$procdff$13' with positive edge clock and positive level reset.

4.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `$paramod\cntr\BITS=s32'00000000000000000000000000100000.$proc$/home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v:134$3'.
Removing empty process `$paramod\cntr\BITS=s32'00000000000000000000000000100000.$proc$/home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v:134$3'.
Cleaned up 3 empty switches.

4.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cntr\BITS=s32'00000000000000000000000000100000.
Optimizing module cntr_example.

4.3. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\cntr\BITS=s32'00000000000000000000000000100000.
<suppressed ~1 debug messages>

4.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.6. Executing CHECK pass (checking for obvious problems).
Checking module cntr_example...
Found and reported 0 problems.

4.7. Executing OPT pass (performing simple optimizations).

4.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cntr_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cntr_example.
Performed a total of 0 changes.

4.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.7.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

4.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.7.9. Finished OPT passes. (There is nothing left to do.)

4.8. Executing FSM pass (extract and optimize FSM).

4.8.1. Executing FSM_DETECT pass (finding FSMs in design).

4.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

4.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.9. Executing OPT pass (performing simple optimizations).

4.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cntr_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cntr_example.
Performed a total of 0 changes.

4.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\cntr.$procdff$13 ($adff) from module cntr_example (D = $flatten\cntr.$procmux$9_Y, Q = \cntr.q).

4.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

4.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.9.9. Rerunning OPT passes. (Maybe there is more to do..)

4.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cntr_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cntr_example.
Performed a total of 0 changes.

4.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.9.13. Executing OPT_DFF pass (perform DFF optimizations).

4.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

4.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.9.16. Finished OPT passes. (There is nothing left to do.)

4.10. Executing WREDUCE pass (reducing word size of cells).

4.11. Executing PEEPOPT pass (run peephole optimizers).

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

4.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module cntr_example:
  creating $macc model for $flatten\cntr.$add$/home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v:140$4 ($add).
  creating $alu model for $macc $flatten\cntr.$add$/home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v:140$4.
  creating $alu cell for $flatten\cntr.$add$/home/htf6ry/gf180-demo/openlane/cntr_example/../../verilog/rtl/cntr_example.v:140$4: $auto$alumacc.cc:485:replace_alu$15
  created 1 $alu and 0 $macc cells.

4.14. Executing SHARE pass (SAT-based resource sharing).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cntr_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cntr_example.
Performed a total of 0 changes.

4.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.15.6. Executing OPT_DFF pass (perform DFF optimizations).

4.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

4.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.15.9. Finished OPT passes. (There is nothing left to do.)

4.16. Executing MEMORY pass.

4.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

4.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

4.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

4.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

4.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

4.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

4.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

4.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.18.3. Executing OPT_DFF pass (perform DFF optimizations).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cntr_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cntr_example.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.20.6. Executing OPT_SHARE pass.

4.20.7. Executing OPT_DFF pass (perform DFF optimizations).

4.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

4.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.20.10. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~381 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.
<suppressed ~183 debug messages>

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.22.3. Executing OPT_DFF pass (perform DFF optimizations).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..
Removed 36 unused cells and 114 unused wires.
<suppressed ~37 debug messages>

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\cntr_example' to `<abc-temp-dir>/input.blif'..
Extracted 148 gates and 215 wires to a netlist network with 66 inputs and 32 outputs.

4.23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:       13
ABC RESULTS:               XOR cells:        9
ABC RESULTS:              NAND cells:       22
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:              XNOR cells:       22
ABC RESULTS:               MUX cells:       32
ABC RESULTS:            ANDNOT cells:       39
ABC RESULTS:        internal signals:      117
ABC RESULTS:           input signals:       66
ABC RESULTS:          output signals:       32
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

4.24.3. Executing OPT_DFF pass (perform DFF optimizations).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..
Removed 0 unused cells and 93 unused wires.
<suppressed ~1 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \cntr_example

4.25.2. Analyzing design hierarchy..
Top module:  \cntr_example
Removed 0 unused modules.

4.26. Printing statistics.

=== cntr_example ===

   Number of wires:                169
   Number of wire bits:            336
   Number of public wires:          17
   Number of public wire bits:     184
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                184
     $_ANDNOT_                      39
     $_AND_                          1
     $_DFFE_PP0P_                   32
     $_MUX_                         32
     $_NAND_                        22
     $_NOT_                          2
     $_ORNOT_                       12
     $_OR_                          13
     $_XNOR_                        22
     $_XOR_                          9

4.27. Executing CHECK pass (checking for obvious problems).
Checking module cntr_example...
Found and reported 0 problems.

5. Generating Graphviz representation of design.
Writing dot description to `/home/htf6ry/gf180-demo/openlane/cntr_example/runs/22_12_01_09_51/tmp/synthesis/post_techmap.dot'.
Dumping module cntr_example to page 1.
Warning: WIDTHLABEL \io_in [0] 1
Warning: WIDTHLABEL \cntr.q [0] 1
Warning: WIDTHLABEL \cntr.q [1] 1
Warning: WIDTHLABEL \cntr.q [0] 1
Warning: WIDTHLABEL \io_in [1] 1
Warning: WIDTHLABEL \cntr.q [1] 1
Warning: WIDTHLABEL \cntr.q [0] 1
Warning: WIDTHLABEL \cntr.q [2] 1
Warning: WIDTHLABEL \io_in [2] 1
Warning: WIDTHLABEL \cntr.q [2] 1
Warning: WIDTHLABEL \cntr.q [3] 1
Warning: WIDTHLABEL \io_in [3] 1
Warning: WIDTHLABEL \cntr.q [3] 1
Warning: WIDTHLABEL \cntr.q [2] 1
Warning: WIDTHLABEL \cntr.q [4] 1
Warning: WIDTHLABEL \io_in [4] 1
Warning: WIDTHLABEL \cntr.q [4] 1
Warning: WIDTHLABEL \cntr.q [5] 1
Warning: WIDTHLABEL \io_in [5] 1
Warning: WIDTHLABEL \cntr.q [5] 1
Warning: WIDTHLABEL \cntr.q [4] 1
Warning: WIDTHLABEL \cntr.q [6] 1
Warning: WIDTHLABEL \io_in [6] 1
Warning: WIDTHLABEL \cntr.q [6] 1
Warning: WIDTHLABEL \cntr.q [7] 1
Warning: WIDTHLABEL \io_in [7] 1
Warning: WIDTHLABEL \cntr.q [7] 1
Warning: WIDTHLABEL \cntr.q [6] 1
Warning: WIDTHLABEL \cntr.q [8] 1
Warning: WIDTHLABEL \io_in [8] 1
Warning: WIDTHLABEL \cntr.q [8] 1
Warning: WIDTHLABEL \cntr.q [9] 1
Warning: WIDTHLABEL \io_in [9] 1
Warning: WIDTHLABEL \cntr.q [9] 1
Warning: WIDTHLABEL \cntr.q [8] 1
Warning: WIDTHLABEL \cntr.q [10] 1
Warning: WIDTHLABEL \io_in [10] 1
Warning: WIDTHLABEL \cntr.q [10] 1
Warning: WIDTHLABEL \cntr.q [11] 1
Warning: WIDTHLABEL \io_in [11] 1
Warning: WIDTHLABEL \cntr.q [11] 1
Warning: WIDTHLABEL \cntr.q [10] 1
Warning: WIDTHLABEL \cntr.q [12] 1
Warning: WIDTHLABEL \io_in [12] 1
Warning: WIDTHLABEL \cntr.q [12] 1
Warning: WIDTHLABEL \cntr.q [13] 1
Warning: WIDTHLABEL \io_in [13] 1
Warning: WIDTHLABEL \cntr.q [13] 1
Warning: WIDTHLABEL \cntr.q [12] 1
Warning: WIDTHLABEL \cntr.q [14] 1
Warning: WIDTHLABEL \io_in [14] 1
Warning: WIDTHLABEL \cntr.q [14] 1
Warning: WIDTHLABEL \cntr.q [15] 1
Warning: WIDTHLABEL \io_in [15] 1
Warning: WIDTHLABEL \cntr.q [15] 1
Warning: WIDTHLABEL \cntr.q [14] 1
Warning: WIDTHLABEL \cntr.q [16] 1
Warning: WIDTHLABEL \io_in [16] 1
Warning: WIDTHLABEL \cntr.q [16] 1
Warning: WIDTHLABEL \cntr.q [17] 1
Warning: WIDTHLABEL \io_in [17] 1
Warning: WIDTHLABEL \cntr.q [17] 1
Warning: WIDTHLABEL \cntr.q [16] 1
Warning: WIDTHLABEL \cntr.q [18] 1
Warning: WIDTHLABEL \io_in [18] 1
Warning: WIDTHLABEL \cntr.q [18] 1
Warning: WIDTHLABEL \cntr.q [19] 1
Warning: WIDTHLABEL \io_in [19] 1
Warning: WIDTHLABEL \cntr.q [19] 1
Warning: WIDTHLABEL \cntr.q [18] 1
Warning: WIDTHLABEL \cntr.q [20] 1
Warning: WIDTHLABEL \io_in [20] 1
Warning: WIDTHLABEL \cntr.q [20] 1
Warning: WIDTHLABEL \cntr.q [21] 1
Warning: WIDTHLABEL \io_in [21] 1
Warning: WIDTHLABEL \cntr.q [21] 1
Warning: WIDTHLABEL \cntr.q [20] 1
Warning: WIDTHLABEL \cntr.q [22] 1
Warning: WIDTHLABEL \io_in [22] 1
Warning: WIDTHLABEL \cntr.q [22] 1
Warning: WIDTHLABEL \cntr.q [23] 1
Warning: WIDTHLABEL \io_in [23] 1
Warning: WIDTHLABEL \cntr.q [23] 1
Warning: WIDTHLABEL \cntr.q [22] 1
Warning: WIDTHLABEL \cntr.q [24] 1
Warning: WIDTHLABEL \io_in [24] 1
Warning: WIDTHLABEL \cntr.q [24] 1
Warning: WIDTHLABEL \cntr.q [25] 1
Warning: WIDTHLABEL \io_in [25] 1
Warning: WIDTHLABEL \cntr.q [25] 1
Warning: WIDTHLABEL \cntr.q [24] 1
Warning: WIDTHLABEL \cntr.q [26] 1
Warning: WIDTHLABEL \io_in [26] 1
Warning: WIDTHLABEL \cntr.q [26] 1
Warning: WIDTHLABEL \cntr.q [27] 1
Warning: WIDTHLABEL \io_in [27] 1
Warning: WIDTHLABEL \cntr.q [27] 1
Warning: WIDTHLABEL \cntr.q [26] 1
Warning: WIDTHLABEL \cntr.q [28] 1
Warning: WIDTHLABEL \io_in [28] 1
Warning: WIDTHLABEL \cntr.q [28] 1
Warning: WIDTHLABEL \cntr.q [29] 1
Warning: WIDTHLABEL \io_in [29] 1
Warning: WIDTHLABEL \cntr.q [29] 1
Warning: WIDTHLABEL \cntr.q [28] 1
Warning: WIDTHLABEL \cntr.q [30] 1
Warning: WIDTHLABEL \io_in [30] 1
Warning: WIDTHLABEL \cntr.q [30] 1
Warning: WIDTHLABEL \cntr.q [31] 1
Warning: WIDTHLABEL \io_in [31] 1
Warning: WIDTHLABEL \cntr.q [5] 1
Warning: WIDTHLABEL \cntr.q [6] 1
Warning: WIDTHLABEL \cntr.q [7] 1
Warning: WIDTHLABEL \cntr.q [8] 1
Warning: WIDTHLABEL \cntr.q [9] 1
Warning: WIDTHLABEL \cntr.q [10] 1
Warning: WIDTHLABEL \cntr.q [11] 1
Warning: WIDTHLABEL \cntr.q [12] 1
Warning: WIDTHLABEL \cntr.q [13] 1
Warning: WIDTHLABEL \cntr.q [14] 1
Warning: WIDTHLABEL \cntr.q [15] 1
Warning: WIDTHLABEL \cntr.q [16] 1
Warning: WIDTHLABEL \cntr.q [17] 1
Warning: WIDTHLABEL \cntr.q [18] 1
Warning: WIDTHLABEL \cntr.q [19] 1
Warning: WIDTHLABEL \cntr.q [20] 1
Warning: WIDTHLABEL \cntr.q [21] 1
Warning: WIDTHLABEL \cntr.q [22] 1
Warning: WIDTHLABEL \cntr.q [23] 1
Warning: WIDTHLABEL \cntr.q [24] 1
Warning: WIDTHLABEL \cntr.q [25] 1
Warning: WIDTHLABEL \cntr.q [26] 1
Warning: WIDTHLABEL \cntr.q [27] 1
Warning: WIDTHLABEL \cntr.q [28] 1
Warning: WIDTHLABEL \cntr.q [29] 1
Warning: WIDTHLABEL \cntr.q [30] 1
Warning: WIDTHLABEL \cntr.q [31] 1
Warning: WIDTHLABEL \cntr.q [0] 1
Warning: WIDTHLABEL \cntr.q [1] 1
Warning: WIDTHLABEL \cntr.q [2] 1
Warning: WIDTHLABEL \cntr.q [3] 1
Warning: WIDTHLABEL \cntr.q [4] 1

6. Executing SHARE pass (SAT-based resource sharing).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cntr_example..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cntr_example.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cntr_example'.
Removed a total of 0 cells.

7.6. Executing OPT_DFF pass (perform DFF optimizations).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cntr_example.

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..
Removed 0 unused cells and 10 unused wires.
<suppressed ~10 debug messages>

9. Printing statistics.

=== cntr_example ===

   Number of wires:                159
   Number of wire bits:            233
   Number of public wires:           7
   Number of public wire bits:      81
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                184
     $_ANDNOT_                      39
     $_AND_                          1
     $_DFFE_PP0P_                   32
     $_MUX_                         32
     $_NAND_                        22
     $_NOT_                          2
     $_ORNOT_                       12
     $_OR_                          13
     $_XNOR_                        22
     $_XOR_                          9

10. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell gf180mcu_fd_sc_mcu7t5v0__dffnq_1 (noninv, pins=3, area=65.86) is a direct match for cell type $_DFF_N_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffq_1 (noninv, pins=3, area=63.66) is a direct match for cell type $_DFF_P_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1 (noninv, pins=4, area=74.64) is a direct match for cell type $_DFF_NN0_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1 (noninv, pins=4, area=79.03) is a direct match for cell type $_DFF_NN1_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffrnq_1 (noninv, pins=4, area=74.64) is a direct match for cell type $_DFF_PN0_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffsnq_1 (noninv, pins=4, area=79.03) is a direct match for cell type $_DFF_PN1_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1 (noninv, pins=5, area=94.39) is a direct match for cell type $_DFFSR_NNN_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1 (noninv, pins=5, area=85.61) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \gf180mcu_fd_sc_mcu7t5v0__dffnq_1 _DFF_N_ (.CLKN( C), .D( D), .Q( Q));
    \gf180mcu_fd_sc_mcu7t5v0__dffq_1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    \gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1 _DFF_NN0_ (.CLKN( C), .D( D), .Q( Q), .RN( R));
    \gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1 _DFF_NN1_ (.CLKN( C), .D( D), .Q( Q), .SETN( R));
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \gf180mcu_fd_sc_mcu7t5v0__dffrnq_1 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RN( R));
    \gf180mcu_fd_sc_mcu7t5v0__dffsnq_1 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SETN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1 _DFFSR_NNN_ (.CLKN( C), .D( D), .Q( Q), .RN( R), .SETN( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1 _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .RN( R), .SETN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

10.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\cntr_example':
  mapped 32 $_DFF_PN0_ cells to \gf180mcu_fd_sc_mcu7t5v0__dffrnq_1 cells.

11. Printing statistics.

=== cntr_example ===

   Number of wires:                223
   Number of wire bits:            297
   Number of public wires:           7
   Number of public wire bits:      81
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                248
     $_ANDNOT_                      39
     $_AND_                          1
     $_MUX_                         64
     $_NAND_                        22
     $_NOT_                         34
     $_ORNOT_                       12
     $_OR_                          13
     $_XNOR_                        22
     $_XOR_                          9
     gf180mcu_fd_sc_mcu7t5v0__dffrnq_1     32

[INFO]: USING STRATEGY AREA 0

12. Executing ABC pass (technology mapping using ABC).

12.1. Extracting gate netlist of module `\cntr_example' to `/tmp/yosys-abc-vjusJJ/input.blif'..
Extracted 216 gates and 284 wires to a netlist network with 68 inputs and 64 outputs.

12.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-vjusJJ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-vjusJJ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-vjusJJ/input.blif 
ABC: + read_lib -w /home/htf6ry/gf180-demo/openlane/cntr_example/runs/22_12_01_09_51/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__antenna" without logic function.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_3".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_12".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_16".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffsnq_4".
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__endcap" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_16" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_16" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__filltie" without logic function.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__hold".
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtn_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtn_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtn_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_3".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_12".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_16".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latsnq_4".
ABC: Library "gf180mcuC_merged" from "/home/htf6ry/gf180-demo/openlane/cntr_example/runs/22_12_01_09_51/tmp/synthesis/trimmed.lib" has 143 cells (72 skipped: 36 seq; 15 tri-state; 21 no func; 0 dont_use).  Time =     0.20 sec
ABC: Memory =   23.58 MB. Time =     0.20 sec
ABC: Warning: Detected 6 multi-output gates (for example, "gf180mcu_fd_sc_mcu7t5v0__addf_1").
ABC: + read_constr -v /home/htf6ry/gf180-demo/openlane/cntr_example/runs/22_12_01_09_51/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "gf180mcu_fd_sc_mcu7t5v0__inv_1".
ABC: Setting output load to be 72.910004.
ABC: + read_constr /home/htf6ry/gf180-demo/openlane/cntr_example/runs/22_12_01_09_51/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 30000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 30000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 3000.0 
ABC: + upsize -D 30000 
ABC: Current delay (7458.62 ps) does not exceed the target delay (30000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 30000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    253 ( 33.2 %)   Cap = 22.5 ff (  7.1 %)   Area =     3911.85 ( 75.5 %)   Delay =  8612.81 ps  (  3.2 %)               
ABC: Path  0 --       5 : 0    4 pi                               A =   0.00  Df = 216.6  -98.6 ps  S = 448.4 ps  Cin =  0.0 ff  Cout =  15.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     134 : 4    6 gf180mcu_fd_sc_mcu7t5v0__and4_1  A =  24.15  Df =1288.3 -402.6 ps  S = 795.4 ps  Cin =  2.9 ff  Cout =  27.6 ff  Cmax = 359.1 ff  G =  944  
ABC: Path  2 --     178 : 4    8 gf180mcu_fd_sc_mcu7t5v0__nand4_1 A =  19.76  Df =2214.7 -332.1 ps  S =1489.5 ps  Cin =  3.9 ff  Cout =  33.1 ff  Cmax = 222.9 ff  G =  845  
ABC: Path  3 --     184 : 3    5 gf180mcu_fd_sc_mcu7t5v0__nor3_1  A =  17.56  Df =3547.2 -997.5 ps  S =1760.3 ps  Cin =  4.0 ff  Cout =  21.6 ff  Cmax = 122.2 ff  G =  539  
ABC: Path  4 --     185 : 4    3 gf180mcu_fd_sc_mcu7t5v0__and4_1  A =  24.15  Df =4443.7-1051.7 ps  S = 525.8 ps  Cin =  2.9 ff  Cout =  14.7 ff  Cmax = 359.1 ff  G =  504  
ABC: Path  5 --     188 : 3    1 gf180mcu_fd_sc_mcu7t5v0__and3_1  A =  21.95  Df =5007.5-1073.8 ps  S = 238.6 ps  Cin =  2.7 ff  Cout =   4.0 ff  Cmax = 358.0 ff  G =  145  
ABC: Path  6 --     189 : 3    1 gf180mcu_fd_sc_mcu7t5v0__nor3_1  A =  17.56  Df =5234.6 -151.6 ps  S = 606.2 ps  Cin =  4.0 ff  Cout =   4.5 ff  Cmax = 122.2 ff  G =  111  
ABC: Path  7 --     191 : 5    1 gf180mcu_fd_sc_mcu7t5v0__oai32_1 A =  26.34  Df =8612.8-2376.5 ps  S =5656.6 ps  Cin =  4.6 ff  Cout =  72.9 ff  Cmax = 114.5 ff  G = 1577  
ABC: Start-point = pi4 (\io_out [1]).  End-point = po5 ($auto$rtlil.cc:2560:MuxGate$933).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   68/   64  lat =    0  nd =   253  edge =    587  area =3911.70  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-vjusJJ/output.blif 

12.1.2. Re-integrating ABC results.
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__or4_1 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nor3_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__and2_1 cells:        3
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__and4_1 cells:        8
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nor4_1 cells:        3
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__aoi211_1 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nand4_1 cells:        6
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai21_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__or2_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__xor2_1 cells:       13
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nand3_1 cells:        8
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__and3_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai22_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nand2_1 cells:       20
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__aoi21_1 cells:       19
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nor2_1 cells:       47
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__clkinv_1 cells:       35
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai32_1 cells:       30
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__buf_1 cells:       17
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__inv_1 cells:       32
ABC RESULTS:        internal signals:      152
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       64
Removing temp directory.

13. Executing SETUNDEF pass (replace undef values with defined constants).

14. Executing HILOMAP pass (mapping to constant drivers).

15. Executing SPLITNETS pass (splitting up multi-bit signals).

16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cntr_example..
Removed 0 unused cells and 290 unused wires.
<suppressed ~1 debug messages>

17. Executing INSBUF pass (insert buffer cells for connected wires).

18. Executing CHECK pass (checking for obvious problems).
Checking module cntr_example...
Warning: Wire cntr_example.\io_out [37] is used but has no driver.
Warning: Wire cntr_example.\io_out [36] is used but has no driver.
Warning: Wire cntr_example.\io_out [35] is used but has no driver.
Warning: Wire cntr_example.\io_out [34] is used but has no driver.
Warning: Wire cntr_example.\io_out [33] is used but has no driver.
Warning: Wire cntr_example.\io_out [32] is used but has no driver.
Warning: Wire cntr_example.\io_out [31] is used but has no driver.
Warning: Wire cntr_example.\io_out [30] is used but has no driver.
Warning: Wire cntr_example.\io_out [29] is used but has no driver.
Warning: Wire cntr_example.\io_out [28] is used but has no driver.
Warning: Wire cntr_example.\io_out [27] is used but has no driver.
Warning: Wire cntr_example.\io_out [26] is used but has no driver.
Warning: Wire cntr_example.\io_out [25] is used but has no driver.
Warning: Wire cntr_example.\io_out [24] is used but has no driver.
Warning: Wire cntr_example.\io_out [23] is used but has no driver.
Warning: Wire cntr_example.\io_out [22] is used but has no driver.
Warning: Wire cntr_example.\io_out [21] is used but has no driver.
Warning: Wire cntr_example.\io_out [20] is used but has no driver.
Warning: Wire cntr_example.\io_out [19] is used but has no driver.
Warning: Wire cntr_example.\io_out [18] is used but has no driver.
Warning: Wire cntr_example.\io_out [17] is used but has no driver.
Warning: Wire cntr_example.\io_out [16] is used but has no driver.
Warning: Wire cntr_example.\io_out [15] is used but has no driver.
Warning: Wire cntr_example.\io_out [14] is used but has no driver.
Warning: Wire cntr_example.\io_out [13] is used but has no driver.
Warning: Wire cntr_example.\io_out [12] is used but has no driver.
Warning: Wire cntr_example.\io_out [11] is used but has no driver.
Warning: Wire cntr_example.\io_out [10] is used but has no driver.
Warning: Wire cntr_example.\io_out [9] is used but has no driver.
Warning: Wire cntr_example.\io_out [8] is used but has no driver.
Warning: Wire cntr_example.\io_out [7] is used but has no driver.
Warning: Wire cntr_example.\io_out [6] is used but has no driver.
Warning: Wire cntr_example.\io_out [5] is used but has no driver.
Warning: Wire cntr_example.\io_out [4] is used but has no driver.
Warning: Wire cntr_example.\io_out [3] is used but has no driver.
Warning: Wire cntr_example.\io_out [2] is used but has no driver.
Warning: Wire cntr_example.\io_out [1] is used but has no driver.
Warning: Wire cntr_example.\io_out [0] is used but has no driver.
Found and reported 38 problems.

19. Printing statistics.

=== cntr_example ===

   Number of wires:                260
   Number of wire bits:            334
   Number of public wires:           7
   Number of public wire bits:      81
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                291
     gf180mcu_fd_sc_mcu7t5v0__and2_1      3
     gf180mcu_fd_sc_mcu7t5v0__and3_1      2
     gf180mcu_fd_sc_mcu7t5v0__and4_1      8
     gf180mcu_fd_sc_mcu7t5v0__aoi211_1      1
     gf180mcu_fd_sc_mcu7t5v0__aoi21_1     19
     gf180mcu_fd_sc_mcu7t5v0__buf_1     17
     gf180mcu_fd_sc_mcu7t5v0__clkinv_1     35
     gf180mcu_fd_sc_mcu7t5v0__dffrnq_1     32
     gf180mcu_fd_sc_mcu7t5v0__inv_1     32
     gf180mcu_fd_sc_mcu7t5v0__nand2_1     20
     gf180mcu_fd_sc_mcu7t5v0__nand3_1      8
     gf180mcu_fd_sc_mcu7t5v0__nand4_1      6
     gf180mcu_fd_sc_mcu7t5v0__nor2_1     47
     gf180mcu_fd_sc_mcu7t5v0__nor3_1      2
     gf180mcu_fd_sc_mcu7t5v0__nor4_1      3
     gf180mcu_fd_sc_mcu7t5v0__oai21_1      2
     gf180mcu_fd_sc_mcu7t5v0__oai22_1      2
     gf180mcu_fd_sc_mcu7t5v0__oai32_1     30
     gf180mcu_fd_sc_mcu7t5v0__or2_1      2
     gf180mcu_fd_sc_mcu7t5v0__or4_1      1
     gf180mcu_fd_sc_mcu7t5v0__tiel      6
     gf180mcu_fd_sc_mcu7t5v0__xor2_1     13

   Chip area for module '\cntr_example': 6352.908800

20. Executing Verilog backend.

20.1. Executing BMUXMAP pass.

20.2. Executing DEMUXMAP pass.
Dumping module `\cntr_example'.

Warnings: 104 unique messages, 182 total
End of script. Logfile hash: 9fa9af820f, CPU: user 1.23s system 0.03s, MEM: 58.73 MB peak
Yosys 0.22 (git sha1 f109fa3d4c5, gcc 8.3.1 -fPIC -Os)
Time spent: 30% 2x abc (0 sec), 28% 4x stat (0 sec), ...
